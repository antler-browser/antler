#!/usr/bin/env node

/**
 * Build script to minify the WebView injected JavaScript.
 * This runs at build time to pre-minify the code for zero runtime overhead.
 */

const esbuild = require('esbuild');
const fs = require('fs');
const path = require('path');

const MAIN_TEMPLATE_PATH = path.join(__dirname, '../lib/webview/webview-injected.raw.js');
const CONSOLE_INTERCEPT_PATH = path.join(__dirname, '../lib/webview/webview-console-intercept.raw.js');
const MAIN_OUTPUT_PATH = path.join(__dirname, '../lib/webview/webview-injected.min.ts');
const CONSOLE_OUTPUT_PATH = path.join(__dirname, '../lib/webview/webview-console-intercept.min.ts');

console.log('[Build] Minifying WebView injected JavaScript...\n');

let totalInputSize = 0;
let totalOutputSize = 0;

try {
  // Minify main template
  console.log('[Build] Minifying main template...');
  const mainRaw = fs.readFileSync(MAIN_TEMPLATE_PATH, 'utf8');
  const mainResult = esbuild.transformSync(mainRaw, {
    minify: true,
    loader: 'js',
    target: 'es2015', // Match WebView compatibility (iOS 11+, Android 5.0+)
    keepNames: false  // Allow variable renaming for better compression
  });

  // Append 'true' for Android compatibility (required by react-native-webview)
  // Android's injectedJavaScript requires the code to evaluate to a truthy value
  // or it will silently fail. This must be added post-minification because
  // esbuild would remove it as "dead code" during optimization.
  mainResult.code = mainResult.code.trim() + ';true;\n';

  // Wrap as TypeScript module with exported constant
  const mainTsContent = `// Auto-generated by scripts/minify-webview-js.js
// DO NOT EDIT - Run 'yarn minify-webview' to regenerate

export const minifiedMainTemplate = ${JSON.stringify(mainResult.code)};
`;

  fs.writeFileSync(MAIN_OUTPUT_PATH, mainTsContent);
  totalInputSize += mainRaw.length;
  totalOutputSize += mainResult.code.length;
  console.log(`[Build]   ✓ ${MAIN_TEMPLATE_PATH.split('/').pop()}`);
  console.log(`[Build]     ${mainRaw.length} → ${mainResult.code.length} bytes (${((1 - mainResult.code.length / mainRaw.length) * 100).toFixed(1)}% smaller)\n`);

  // Minify console intercept code
  console.log('[Build] Minifying console intercept...');
  const consoleRaw = fs.readFileSync(CONSOLE_INTERCEPT_PATH, 'utf8');
  const consoleResult = esbuild.transformSync(consoleRaw, {
    minify: true,
    loader: 'js',
    target: 'es2015',
    keepNames: false
  });

  // Wrap as TypeScript module with exported constant
  const consoleTsContent = `// Auto-generated by scripts/minify-webview-js.js
// DO NOT EDIT - Run 'yarn minify-webview' to regenerate

export const minifiedConsoleIntercept = ${JSON.stringify(consoleResult.code)};
`;

  fs.writeFileSync(CONSOLE_OUTPUT_PATH, consoleTsContent);
  totalInputSize += consoleRaw.length;
  totalOutputSize += consoleResult.code.length;
  console.log(`[Build]   ✓ ${CONSOLE_INTERCEPT_PATH.split('/').pop()}`);
  console.log(`[Build]     ${consoleRaw.length} → ${consoleResult.code.length} bytes (${((1 - consoleResult.code.length / consoleRaw.length) * 100).toFixed(1)}% smaller)\n`);

  // Summary
  console.log('[Build] ═══════════════════════════════════════');
  console.log('[Build] ✓ All files minified successfully');
  console.log(`[Build]   Total input:  ${totalInputSize} bytes`);
  console.log(`[Build]   Total output: ${totalOutputSize} bytes`);
  console.log(`[Build]   Total saved:  ${((1 - totalOutputSize / totalInputSize) * 100).toFixed(1)}%`);
  console.log('[Build] ═══════════════════════════════════════');
} catch (error) {
  console.error('\n[Build] ✗ Failed to minify WebView JavaScript:', error.message);
  process.exit(1);
}
